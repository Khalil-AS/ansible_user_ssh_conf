---
# tasks/main.yml

# Générer une clé SSH pour l'utilisateur SSH (sur le nœud de contrôle Ansible)
- name: Générer une clé SSH pour l'utilisateur control
  delegate_to: localhost
  become: no
  community.crypto.openssh_keypair:  # community.crypto collection
    path: "{{ ssh_key_path }}"
    type: "{{ ssh_key_type }}"
    force: no  # Ne pas regénérer la clé si elle existe déjà
  register: ssh_keygen_result
  tags: ssh-key

# Créer l'utilisateur SSH
- name: Créer un utilisateur définis dans defaults/main.yml
  user:
    name: "{{ ssh_user }}"
    state: present
    password: "{{ ssh_password | password_hash('sha512') }}"
    groups: sudo
    shell: /bin/bash
    createhome: yes
  register: user_creation_result
  tags: create-user

# Copier la clé publique dans le fichier authorized_keys sur node
- name: Copier la clé publique dans le fichier authorized_keys
  authorized_key:
    user: "{{ ssh_user }}"
    state: present
    key: "{{ lookup('file', ssh_key_path + '.pub') }}"
  register: authorized_key_result
  tags: authorized-keys

# Ajouter l'entrée sudoers pour l'utilisateur SSH définis dans defaults/main
- name: Ajouter l'entrée sudoers pour l'utilisateur control
  lineinfile:
    path: "/etc/sudoers"
    line: "{{ ssh_user }} ALL=(ALL) NOPASSWD:ALL"
    validate: 'visudo -cf %s'  # Valider la syntaxe du fichier sudoers
  register: sudoers_entry_result
  tags: sudoers

# S'assure que le répertoire .ssh existe et dispose des droits adéquats
- name: Ensure .ssh directory exists
  file:
    path: "/home/{{ ssh_user }}/.ssh"
    state: directory
    owner: "{{ ssh_user }}"
    group: "{{ ssh_user }}"
    mode: '0700'
  tags: ssh-directory

# S'assure que le fichier authorized_keys dispose des droits adéquats
- name: Ensure authorized_keys file permissions
  file:
    path: "/home/{{ ssh_user }}/.ssh/authorized_keys"
    owner: "{{ ssh_user }}"
    group: "{{ ssh_user }}"
    mode: '0600'
  tags: authorized-keys-permissions

# tasks file for user_ssh_conf
